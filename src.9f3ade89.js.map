{"version":3,"sources":["src/index.js"],"names":["flip","Math","random","randomNumber","limit","Error","numberOfBits","toString","length","scaleFactor","pow","randomBits","Array","from","map","join","randomInt","parseInt","floor","runSamplingTest","param","results","console","log"],"mappings":";AAAA,SAASA,IACAC,OAAAA,KAAKC,UAAY,GAG1B,SAASC,EAAaC,GAEhB,GAAiB,iBAAVA,EACH,MAAA,IAAIC,MAAM,sCAGdD,GAAU,IAAVA,EACI,MAAA,IAAIC,MAAM,4CAGdD,GAAAA,EAAQ,IACJ,MAAA,IAAIC,MACR,8DAKEC,IAAAA,EAAeF,EAAMG,SAAS,GAAGC,OAKjCC,EAHYR,KAAKS,IAAI,EAAGJ,GAGEF,EAE1BO,EAAaC,MAAMC,KAAK,CAAEL,OAAQF,IACrCQ,IAAI,WAAOd,OAAAA,IAAS,EAAI,IACxBe,KAAK,IAEFC,EAAYC,SAASN,EAAY,GAGhCV,OAAAA,KAAKiB,MAAMF,EAAYP,GAKhC,SAASU,EAAgBC,GACjBC,IAAAA,EAAU,GAEhBT,MAAMC,KAAK,CAAEL,OAAQ,MAAOM,IAAI,WAC1BZ,IAAAA,EAASC,EAAaiB,GAC1BC,EAAQnB,GAAUmB,EAAQnB,GAAUmB,EAAQnB,GAAU,EAAI,IAG5DoB,QAAQC,IAA2CH,uCAAAA,OAAAA,IACnDE,QAAQC,IAAIF,GAIdF,EAAgB,GAChBA,EAAgB,IAChBA,EAAgB,KAGhBG,QAAQC,IAAIpB,EAAa,IACzBmB,QAAQC,IAAIpB,EAAa,MACzBmB,QAAQC,IAAIpB,EAAa","file":"src.9f3ade89.js","sourceRoot":"..","sourcesContent":["function flip() {\n  return Math.random() >= 0.5;\n}\n\nfunction randomNumber(limit) {\n  //params validation\n  if (typeof limit !== \"number\") {\n    throw new Error(\"limit parameter should be a number\");\n  }\n\n  if (limit === 0) {\n    throw new Error(\"limit parameter should be greater than 0\");\n  }\n\n  if (limit > 1000000) {\n    throw new Error(\n      \"limit parameter should be less than or equals to 1,000,000\"\n    );\n  }\n\n  // get the number of needed bits to represent the limit number\n  const numberOfBits = limit.toString(2).length;\n  // get the max int that can be represented within the number of bits, this is the nearest power of two\n  const realLimit = Math.pow(2, numberOfBits);\n  // the generated number will be within the boundaries of [0, 2^numberOfBits)\n  // but we need to scale this range to fit our limits\n  const scaleFactor = realLimit / limit;\n  // generate an array of random 0's and 1's of numberOfBits length\n  const randomBits = Array.from({ length: numberOfBits })\n    .map(() => (flip() ? 1 : 0))\n    .join(\"\");\n  // convert the array into a integer\n  const randomInt = parseInt(randomBits, 2);\n\n  // scale down the random number to fit within our range\n  return Math.floor(randomInt / scaleFactor);\n}\n\n// TESTS\n\nfunction runSamplingTest(param) {\n  const results = {};\n\n  Array.from({ length: 100 }).map(() => {\n    var random = randomNumber(param);\n    results[random] = results[random] ? results[random] + 1 : 1;\n  });\n\n  console.log(`Testing randomNumber function with: ${param}`);\n  console.log(results);\n}\n\n// sampling tests\nrunSamplingTest(1);\nrunSamplingTest(10);\nrunSamplingTest(500);\n\n//single tests\nconsole.log(randomNumber(1));\nconsole.log(randomNumber(500));\nconsole.log(randomNumber(50000));\n\n// uncomment to see the errros thrown\n// console.log(randomNumber());\n// console.log(randomNumber({}));\n// console.log(randomNumber(1000001));\n"]}